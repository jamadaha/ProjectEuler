; compile : nasm -f elf32 solution.asm; gcc -no-pie -m32 -o out solution.o; ./out
; ------------------------------------------------------------------------------------------------------------
;
;  Project Euler - Problem 8
;
;  The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
;  
;    73167176531330624919225119674426574742355349194934
;    96983520312774506326239578318016984801869478851843
;    85861560789112949495459501737958331952853208805511
;    12540698747158523863050715693290963295227443043557
;    66896648950445244523161731856403098711121722383113
;    62229893423380308135336276614282806444486645238749
;    30358907296290491560440772390713810515859307960866
;    70172427121883998797908792274921901699720888093776
;    65727333001053367881220235421809751254540594752243
;    52584907711670556013604839586446706324415722155397
;    53697817977846174064955149290862569321978468622482
;    83972241375657056057490261407972968652414535100474
;    82166370484403199890008895243450658541227588666881
;    16427171479924442928230863465674813919123162824586
;    17866458359124566529476545682848912883142607690042
;    24219022671055626321111109370544217506941658960408
;    07198403850962455444362981230987879927244284909188
;    84580156166097919133875499200524063689912560717606
;    05886116467109405077541002256983155200055935729725
;    71636269561882670428252483600823257530420752963450
;  
;  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
;  What is the value of this product?
;
;  Technically works, however, not for 13 neighbours. As the result can not be stored in 32 bit.
;
; ------------------------------------------------------------------------------------------------------------
                global          main
                extern          printf

                section         .data
msg:            db              "%i",  0x0a, 0x00		
values:         dd              7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1 ;   0 -  25
                dd              9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4 ;  25 -  50
                dd              9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7 ;  50 -  75
                dd              8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3 ;  75 - 100
                dd              8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0 ; 100 - 125
                dd              1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1 ; 125 - 150
                dd              1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1 ; 150 - 175
                dd              5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7 ; 175 - 200
                dd              6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3 ; 200 - 225
                dd              1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3 ; 225 - 250
                dd              6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7 ; 250 - 275
                dd              6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9 ; 275 - 300
                dd              3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7 ; 300 - 325
                dd              2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6 ; 325 - 350
                dd              7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9 ; 350 - 375
                dd              2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6 ; 375 - 400
                dd              6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3 ; 400 - 425
                dd              5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3 ; 425 - 450
                dd              5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3 ; 450 - 475
                dd              9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7 ; 475 - 500
                dd              5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4 ; 500 - 525
                dd              9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2 ; 525 - 550
                dd              8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6 ; 550 - 575
                dd              1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4 ; 575 - 600
                dd              8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9 ; 600 - 625
                dd              5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1 ; 625 - 650
                dd              1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6 ; 650 - 675
                dd              3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6 ; 675 - 700
                dd              1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4 ; 700 - 725
                dd              5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2 ; 725 - 750
                dd              2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0 ; 750 - 775
                dd              9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8 ; 775 - 800
                dd              0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8 ; 800 - 825
                dd              1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8 ; 825 - 850
                dd              8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9 ; 850 - 875
                dd              9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6 ; 875 - 900
                dd              0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0 ; 900 - 925
                dd              2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5 ; 925 - 950
                dd              7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8 ; 950 - 975
                dd              3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0 ; 975 - 1000
value_count:    dd              1000
range:          dd              12
best_value:     dd              0
best_index:     dd              0

                section         .text
main:           push            ebp
                mov             ebp, esp

                ; init
                dec             dword [range]                   ; handle off by one
                mov             ebx, 1                          ; start search after initial range
                xor             ecx, ecx                        ; index of first value in range
                mov             eax, dword [values]
                
                ; find best value
loop:           cmp             ebx, dword [value_count]        ; bounds check, has checked all values
                jge             done
                cmp             dword [values + ebx * 4], 0
                jne             non_zero
zero:           inc             ebx                             ; in case of zero, skip it
                mov             ecx, ebx                        ; reset ecx to ebx
                mov             eax, dword [values + ebx * 4]   ; set value to next value
                inc             ebx                             ; inc
                cmp             eax, 0
                je              zero                            ; handle multiple zeros in a row
                jmp             loop
non_zero:       mul             dword [values + ebx * 4]
                cmp             eax, dword [best_value]         ; is values within range better?
                jl              iterate
                mov             dword [best_value], eax
                mov             dword [best_index], ebx
iterate:        inc             ebx
                mov             esi, ebx
                sub             esi, ecx
                cmp             esi, dword [range]              ; if not full range
                jle             loop
                div             dword [values + ecx * 4]        ; remove tail
                inc             ecx
                jmp             loop

                ; printing
done:           push            dword [best_value]
                push            msg
                call            printf
                
                ; handle stack stuff
                mov             eax, 0                          ; return code
                mov             esp, ebp
                pop             ebp
                ret
